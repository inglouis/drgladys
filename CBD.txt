///////////////////////////////////////////////////////////////////////////////////////

								---------------------------
								// CAMBIOS BASE DE DATOS //
								---------------------------

* SEGUIMIENTO DE LOS CAMBIOS HECHOS EN LA BASE DE DATOS PARA CONSERVAR LA CONSISTENCIA
* EN EL SISTEMA

- NOTAS
- CODIGO

///////////////////////////////////////////////////////////////////////////////////////

1)-------------------------------------------------------------------------------------
SE HICIERON CAMBIOS EN LA ESTRUCTURA DE LOS USUARIOS
-------------------------------------------------------------------------------------
CREATE TABLE miscelaneos.usuarios
(
  id_usuario bigserial NOT NULL,
  usuario character varying(100) NOT NULL DEFAULT ''::bpchar,
  cookie character varying(100) NOT NULL DEFAULT ''::bpchar,
  rol character varying(100) NOT NULL DEFAULT 'PLACEHOLDER'::bpchar,
  controlador_cambios boolean NOT NULL DEFAULT false,
  notificar_usuario bigint NOT NULL DEFAULT 0,
  status character varying(1) NOT NULL DEFAULT 'A'::bpchar,
  notificacion_reportes jsonb NOT NULL DEFAULT '[]'::jsonb,
  notificacion_recipes jsonb NOT NULL DEFAULT '[]'::jsonb,
  CONSTRAINT pk_id_usuario PRIMARY KEY (id_usuario)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE miscelaneos.usuarios
  OWNER TO postgres;

- REGENERAR TABLA
- RECARGAR DATOS 
		GLADYS DOCTOR 99c5bc82
		ANDREA ADMINISTRADOR 7bdc719f

1)-------------------------------------------------------------------------------------
REEMPLAZAR LA FUNCION QUE TRAE LOS DIAGNOSTICOS COMPLETOS POR ESTAS
---------------------------------------------------------------------------------------
DROP FUNCTION ppal.historias_diagnosticos_armar_lista(jsonb);

CREATE OR REPLACE FUNCTION ppal.basicas_diagnosticos_armar_lista(lista jsonb)
  RETURNS jsonb AS
$BODY$
    DECLARE 
   datos jsonb;
    BEGIN

  datos = (
    SELECT json_agg(t.diagnosticos) from (
      SELECT
          json_build_object(
            'id_diagnostico', id_diagnostico,
            'nombre', nombre
          ) as diagnosticos
      FROM ppal.basicas_traer_nombres_diagnosticos_lista(lista)
    ) as t
  )::jsonb;

  return datos;
    END; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION ppal.basicas_diagnosticos_armar_lista(jsonb)
  OWNER TO postgres;

/*-------------------------------------------------------------*/
DROP FUNCTION ppal.historias_traer_nombres_diagnosticos_lista(jsonb);

CREATE OR REPLACE FUNCTION ppal.basicas_traer_nombres_diagnosticos_lista(IN lista jsonb)
  RETURNS TABLE(id_diagnostico bigint, nombre text) AS
$BODY$
    DECLARE 

    BEGIN

  return query

  SELECT
      b.id_diagnostico,
      b.nombre::text
  FROM (
      SELECT x.*
      FROM 
         jsonb_array_elements(
        (select lista::jsonb) --codigo_historia
         ) AS t(doc),
         jsonb_to_record(t.doc) as x (id bigint)
  ) AS t
  left join basicas.diagnosticos as b on b.id_diagnostico = t.id;
  
    END; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION ppal.basicas_traer_nombres_diagnosticos_lista(jsonb)
  OWNER TO postgres;


